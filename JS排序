import React, { useState, useEffect, useLayoutEffect, useCallback, useMemo, createRef, forwardRef } from 'react';
import './refsDome.css';
import { flushSync } from 'react-dom'
import { ErrorMessage, Formik } from 'formik'
class RefsDome extends React.Component {
    constructor(prop) {
        super(prop);
        this.ref = createRef();
        this.state = {
            test: 0,
            newArr: []
        }
        setTimeout(() => {
            console.log(this.ref.current)
            this.ref.current?.focus()
        }, 3000);
        this.fn = this.fn.bind(this)
        this.getSortFn = this.getSortFn.bind(this)
    }
    getSortFn() {
        let newArrCopy = Array.from(this.state.newArr);
        let repeat = false
        let num = 0
        return function InnerFn(preIndex) {
            repeat = false;
            console.log('newArrCopy', num)
            for (let i = 0; i < newArrCopy.length; i++) {
                if (newArrCopy[i + 1])
                    if (Number(newArrCopy[i][preIndex]) == Number(newArrCopy[i + 1][preIndex])) {
                        console.log('ggggg', newArrCopy[i], preIndex + 1)
                        if (Number(newArrCopy[i][preIndex + 1]) > Number(newArrCopy[i + 1][preIndex + 1])) {
                            let value = newArrCopy[i];
                            newArrCopy[i] = newArrCopy[i + 1]
                            newArrCopy[i + 1] = value
                            repeat = true;
                        }
                    }
            }
            if (repeat) InnerFn(num)
            newArrCopy.reverse()
            console.log('newArrCopy22222', newArrCopy)
            return newArrCopy;
        }
    }
    fn() {
        let arr = ['0.1.1', '2.3.3', '1.24.1', '7.32.1', '5.1.1', '11.302.1.4.5', '2.212.1', '2.22.1', '4.2', '4.3.5', '4.3.4.5']
        let newArr = arr.map(ele => '0.' + ele).map(ele => ele.split('.'))
        this.setState({ newArr }, () => {
            let sortFn = this.getSortFn()
            let resultArr = []
            console.log(this.state.newArr)
            Array.apply(undefined, { length: 6 }).forEach((item, i) => { resultArr = sortFn(i) })
            let lastresultArr = resultArr.map(item => item.slice(1).join('.'))
            console.log('lastresultArr', lastresultArr)
        });
    }
    componentDidMount() {
        setTimeout(() => {
            flushSync(() => this.setState({
                test: this.state.test + 1
            }))
            console.log(this.state.test)

        }, 0);
    }
    render() {
        return (
            <Formik
                initialValues={{ username: 'Bob', password: '' }}
                onSubmit={async values => {
                    await new Promise(resolve => setTimeout(resolve, 500));
                    alert(JSON.stringify(values, null, 2));
                }}
                validate={
                    values => {
                        const errors = {}
                        if (!values.username) {
                            errors.username = 'Required'
                        }
                        if (!values.password) {
                            errors.password = 'Required'
                        }
                        return errors;
                    }
                }
            >
                {props => {
                    const { values, errors, touched, handleChange, handleBlur, handleSubmit, handleReset, isSubmitting } = props;
                    console.log(isSubmitting)
                    return (
                        <form onSubmit={handleSubmit} onReset={handleReset}>
                            <fieldset>
                                <legend>Test Form:</legend>
                                <div>
                                    <label htmlFor='username'>Name</label>
                                    <input id='username' name='username' onBlur={handleBlur} onChange={handleChange} value={values.username} />
                                    {errors.username && touched.username && errors.username}
                                </div>
                                <div>
                                    <label htmlFor='password'>Password</label>
                                    <input id='password' name='password' onBlur={handleBlur} onChange={handleChange} value={values.password} />
                                    {errors.password && touched.password && errors.password}
                                </div>
                                <div>
                                    <button type="submit" disabled={isSubmitting}>
                                        Submit
                                    </button>
                                    <button type="reset">
                                        reset
                                    </button>
                                    <button type="button" onClick={this.fn}>
                                        reset
                                    </button>
                                </div>
                            </fieldset>
                            <Component1 ref={this.ref} />
                        </form>
                    )
                }}
            </Formik>

        )
    }
}

const Component1 = forwardRef((props, ref) => {
    const [hello, setHello] = useState('你好！');
    useEffect(() => {
        console.log('又变了，', hello)
        return () => {
            console.log('朕，退下了')
        }

    }, [])

    useEffect(() => {
        if (hello === 0) {
            setTimeout(() => {
                setHello('See you!' + new Date());
            })
            console.log(hello)

        }
        console.log('又变了，', new Date())
    }, [hello])
    console.log('hello: ', hello);
    // function handleClike(e){
    //     e.preventDefault();
    //     setHello('See you!'+new Date())
    // }
    const handleClike = useMemo(() => (e) => {
        e.preventDefault();
        setHello(0)
    }, [hello]);
    return (
        <>
            <div className='hello'>{hello}</div>
            <button type="button" ref={ref} onClick={handleClike}>改值</button>

        </>
    )
})
export default RefsDome
